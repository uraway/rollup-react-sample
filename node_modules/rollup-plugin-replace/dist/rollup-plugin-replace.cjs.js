'use strict';

var MagicString = require('magic-string');
MagicString = 'default' in MagicString ? MagicString['default'] : MagicString;
var rollupPluginutils = require('rollup-pluginutils');

function escape(str) {
	return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}
function replace() {
	var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	var values = options.values || options;
	var delimiters = (options.delimiters || ['', '']).map(escape);
	var pattern = new RegExp(delimiters[0] + '(' + Object.keys(values).join('|') + ')' + delimiters[1], 'g');

	var filter = rollupPluginutils.createFilter(options.include, options.exclude);

	return {
		transform: function transform(code, id) {
			if (!filter(id)) return null;

			var magicString = new MagicString(code);

			var hasReplacements = false;
			var match = undefined;
			var start = undefined,
			    end = undefined,
			    replacement = undefined;

			while (match = pattern.exec(code)) {
				hasReplacements = true;

				start = match.index;
				end = start + match[0].length;
				replacement = String(values[match[1]]);

				magicString.overwrite(start, end, replacement);
			}

			if (!hasReplacements) return null;

			var result = { code: magicString.toString() };
			if (options.sourceMap !== false) result.map = magicString.generateMap({ hires: true });

			return result;
		}
	};
}

module.exports = replace;